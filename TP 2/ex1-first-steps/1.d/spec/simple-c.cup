init with {:
	System.out.println("[*] Starting input parsing...");
:}

action code {:
	void DEBUG(String s) {
		System.out.println(s);
	}
:}

terminal SemiColon, Comma, OpenParenthesis, CloseParenthesis, OpenBrace,
		CloseBrace, Not, And, Or, Equals, DoubleEquals, NotEquals, Plus,
		DoublePlus, Minus, DoubleMinus, Star, Slash, LessThan, LessThanOrEquals,
		GreaterThan, GreaterThanOrEquals, If, Else, While, For;
terminal Type, Identifier, Integer, Decimal, String;

nonterminal Program, Declaration, VariableDeclaration, VariableAssignment,
			VariableAssignmentNoSemiColon, VariableAssignmentList,
			VariableDeclarationAssignment, VariableDeclarationAssignmentNoSemiColon,
			FunctionDeclaration, FunctionCall, NameIdentificationList,
			NonEmptyNameIdentificationList, NameIdentification, Block,
			StatementSequence, Statement, SimpleStatement, SimpleStatementNoSemiColon,
			IfStatement, ElseOrNothingStatement, ElseStatement, WhileStatement,
			ForStatement, NonEmptyExpressionList, ExpressionList, Expression,
			Literal, Number, BinaryOperation, BinaryOperator, UnaryOperation,
			UnaryOperationEnumeration;

precedence left Plus, Minus, Star, Slash, DoubleEquals, NotEquals, And, Or,
				LessThan, LessThanOrEquals, GreaterThan, GreaterThanOrEquals;
precedence nonassoc Else;



Program ::= /* Epsilon */ | Program Declaration {: :};

Declaration ::= VariableDeclaration | FunctionDeclaration;


VariableDeclaration ::= NameIdentification SemiColon {:
	DEBUG("> VariableDeclaration");
:};

VariableAssignment ::= VariableAssignmentNoSemiColon SemiColon {:
	DEBUG("> VariableAssignment");
:};

VariableAssignmentNoSemiColon ::= VariableAssignmentList Expression;

VariableAssignmentList ::= Identifier Equals | VariableAssignmentList Identifier Equals;

VariableDeclarationAssignment ::= VariableDeclarationAssignmentNoSemiColon SemiColon {:
	DEBUG("> VariableDeclarationAssignment");
:};

VariableDeclarationAssignmentNoSemiColon ::= NameIdentification Equals Expression;

NameIdentificationList ::= /* Epsilon */ | NonEmptyNameIdentificationList;

NonEmptyNameIdentificationList ::= NameIdentification
				| NonEmptyNameIdentificationList Comma NameIdentification;

NameIdentification ::= Type Identifier {:
	DEBUG("> NameIdentification");
:};


FunctionDeclaration ::= NameIdentification OpenParenthesis
						NameIdentificationList CloseParenthesis Block {:
	DEBUG("> FunctionDeclaration");
:};

FunctionCall ::= Identifier OpenParenthesis ExpressionList CloseParenthesis {:
	DEBUG("> FunctionCall");
:};


Block ::= OpenBrace StatementSequence CloseBrace;

StatementSequence ::= /* Epsilon */ | StatementSequence Statement;

Statement ::= SimpleStatement | Block | IfStatement
				| WhileStatement | ForStatement;

SimpleStatement ::= SemiColon | Expression SemiColon
				| VariableDeclaration | VariableAssignment
				| VariableDeclarationAssignment;

SimpleStatementNoSemiColon ::= /* Epsilon */ | Expression | NameIdentification
								| VariableAssignmentNoSemiColon
								| VariableDeclarationAssignmentNoSemiColon;

IfStatement ::= If OpenParenthesis Expression CloseParenthesis Statement ElseOrNothingStatement {:
	DEBUG("> IfStatement");
:};

ElseOrNothingStatement ::= ElseStatement | /* Epsilon */;

ElseStatement ::= Else Statement {:
	DEBUG("> ElseStatement");
:};

WhileStatement ::= While OpenParenthesis Expression CloseParenthesis Statement {:
	DEBUG("> WhileStatement");
:};

ForStatement ::= For OpenParenthesis SimpleStatement SimpleStatement
					SimpleStatementNoSemiColon CloseParenthesis Statement;

ExpressionList ::= /* Epsilon */ | NonEmptyExpressionList;

NonEmptyExpressionList ::= Expression | NonEmptyExpressionList Comma Expression;

Expression ::= Literal | Identifier
				| OpenParenthesis Expression CloseParenthesis
				| FunctionCall | BinaryOperation | UnaryOperation;

Literal ::= Number | String;

Number ::= Integer | Decimal;

BinaryOperation ::= Expression BinaryOperator Expression {:
	DEBUG("> BinaryOperation");
:};

BinaryOperator ::= Plus | Minus | Star | Slash | LessThan | GreaterThan
					| LessThanOrEquals | GreaterThanOrEquals | DoubleEquals
					| NotEquals | And | Or;

UnaryOperation ::= UnaryOperationEnumeration {:
	DEBUG("> UnaryOperation");
:};

UnaryOperationEnumeration ::= Not Expression | DoublePlus Identifier | DoubleMinus Identifier
							| Identifier DoublePlus | Identifier DoubleMinus;

