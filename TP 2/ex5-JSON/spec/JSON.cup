
/**
 * Utilities meant to help pretty-print the parsed JSON
 * value. The result is displayed indented using tabulations.
 * 
 * In order to do that, each parsed pattern handles its
 * own indentation using `sameIndent()` and can modify the
 * global indentation level with `incIndent()` or `decIndent()`.
 * Other methods are implemented here in order to reduce the
 * code quantity necessary in the pattern recognition below.
 */
action code {:
	/**
	 * Stores the current level of indentation as a number
	 * of tabulation characters.
	 */
	private long currentIndent = 0;
	/**
	 * Indicates whether the next parsed pattern will be
	 * allowed to be indented or not.
	 */
	private boolean indentNext = true;
	
	/**
	 * Simple shortcut to System.out.print(char).
	 */
	private void print(char chr) {
		System.out.print(chr);
	}
	
	/**
	 * Simple shortcut to System.out.println(char).
	 */
	private void println(char chr) {
		System.out.println(chr);
	}
	
	/**
	 * Prints all the objects present in the given array to
	 * the standard output stream in a sequence, without any
	 * separator. No newline character is added at the end.
	 */
	private void print(Object... objectArray) {
		for (Object object: objectArray) {
			System.out.print(object);
		}
	}
	
	/**
	 * Calls `print(Object...)` then adds a newline character.
	 */
	private void println(Object... objectArray) {
		print(objectArray);
		System.out.println();
	}
	
	/**
	 * Disables identation just once.
	 */
	private void noIndentNext() {
		indentNext = false;
	}
	
	/**
	 * Prints enough tabulations to reach the current
	 * indentation level. Deactivated if `noIndentNext`
	 * was previously called, but then allows indentation
	 * for the next parsed pattern.
	 */
	private void sameIndent() {
		if (indentNext) {
			for (int i = 0; i < currentIndent; i++) {
				System.out.print('\t');
			}
		}
		else {
			indentNext = true;
		}
	}
	
	/**
	 * Increments the current indentation level by one.
	 */
	private void incIndent() {
		currentIndent += 1;
	}
	
	/**
	 * Decrements the current indentation level by one.
	 */
	private void decIndent() {
		currentIndent -= 1;
	}
	
	/**
	 * Calls `incIndent()` then `sameIndent()`.
	 */
	private void moreIndent() {
		incIndent();
		sameIndent();
	}
	
	/**
	 * Calls `decIndent()` then `sameIndent()`.
	 */
	private void lessIndent() {
		decIndent();
		sameIndent();
	}
:}


terminal Colon, Comma, OpenBrace, CloseBrace, OpenBracket, CloseBracket,		// Single characters.
		Null, True, False,														// Constant literals.
		Number, String;															// Formatted literals.

nonterminal JSONtext, Value, Literal, Array, Object,							// Axiom and JSON elements.
			ArrayElements, ObjectMember, ObjectMembers;							// Smaller constituents.



/**
 * JSONtext is the axiom of the parser : one value only.
 * It is also used to define an end action : simply print
 * a newline.
 */
start with JSONtext;
JSONtext ::= Value									{: println(); :};

/**
 * A JS object can be three things : a constant (also known
 * as literal), an array of objects or a compound object.
 */
Value ::= Literal | Array | Object;


/**
 * A literal value is an object that can be assigned to
 * without any further parsing required. Here, it can be:
 * `null`, `true`, `false`, a number or a character string.
 */
Literal ::= Null									{: sameIndent(); print("null");		:}
			| True									{: sameIndent(); print("true");		:}
			| False									{: sameIndent(); print("false");	:}
			| Number:number							{: sameIndent(); print(number);		:}
			| String:string							{: sameIndent(); print(string);		:};


/**
 * JS array object. It starts with a '[', then follows a
 * comma-separated list of values and it ends with ']'.
 */
Array ::= OpenBracket /* Epsilon */ CloseBracket	{: sameIndent(); print("[]"); :}
		| OpenBracket								{: sameIndent(); println('['); incIndent(); :}
			ArrayElements
			CloseBracket							{: println(); lessIndent(); print(']'); :};

/**
 * A non-empty comma-separated list of `Value` patterns.
 */
ArrayElements ::= Value
				| ArrayElements
					Comma							{: println(','); :}
					Value;


/**
 * A JS compound object: starts with a '{', then follows
 * a comma-separated list of object members and ends with
 * '}'.
 */
Object ::= OpenBrace /* Epsilon */ CloseBrace		{: sameIndent(); print("{}"); :}
			| OpenBrace								{: sameIndent(); println('{'); incIndent(); :}
				ObjectMembers
				CloseBrace							{: println(); lessIndent(); print('}'); :};

/**
 * A non-empty comma-separated list of `ObjectMember`
 * patterns.
 */
ObjectMembers ::= ObjectMember
				| ObjectMembers
					Comma							{: println(','); :}
					ObjectMember;

/**
 * A JSON compound object member: a JSON string, a colon
 * and a `Value` pattern.
 */
ObjectMember ::= String:string
				Colon								{: sameIndent(); print(string, ": "); noIndentNext(); :}
				Value;
