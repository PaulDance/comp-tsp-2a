
action code {:
	private JsonPrettyPrintingUtils u = new JsonPrettyPrintingUtils();
:}


terminal Colon, Comma, OpenBrace, CloseBrace, OpenBracket, CloseBracket,		// Single characters.
		Null, True, False,														// Constant literals.
		Number, String;															// Formatted literals.

nonterminal JSONtext, Value, Literal, Array, Object,							// Axiom and JSON elements.
			ArrayElements, ObjectMember, ObjectMembers;							// Smaller constituents.



/**
 * JSONtext is the axiom of the parser : one value only.
 * It is also used to define an end action : if the input
 * is correct, then display the output.
 */
start with JSONtext;
JSONtext ::= Value									{: u.println(u.getOutput()); :};

/**
 * A JS object can be three things : a constant (also known
 * as literal), an array of objects or a compound object.
 */
Value ::= Literal | Array | Object;


/**
 * A literal value is an object that can be assigned to
 * without any further parsing required. Here, it can be:
 * `null`, `true`, `false`, a number or a character string.
 */
Literal ::= Null									{: u.sameIndent(); u.out("null");	:}
			| True									{: u.sameIndent(); u.out("true");	:}
			| False									{: u.sameIndent(); u.out("false");	:}
			| Number:number							{: u.sameIndent(); u.out(number);	:}
			| String:string							{: u.sameIndent(); u.out(string);	:};


/**
 * JS array object. It starts with a '[', then follows a
 * comma-separated list of values and it ends with ']'.
 */
Array ::= OpenBracket /* Epsilon */ CloseBracket	{: u.sameIndent(); u.out("[]"); :}
		| OpenBracket								{: u.sameIndent(); u.outln('['); u.incIndent(); :}
			ArrayElements
			CloseBracket							{: u.outln(); u.lessIndent(); u.out(']'); :};

/**
 * A non-empty comma-separated list of `Value` patterns.
 */
ArrayElements ::= Value
				| ArrayElements
					Comma							{: u.outln(','); :}
					Value;


/**
 * A JS compound object: starts with a '{', then follows
 * a comma-separated list of object members and ends with
 * '}'.
 */
Object ::= OpenBrace /* Epsilon */ CloseBrace		{: u.sameIndent(); u.out("{}"); :}
			| OpenBrace								{: u.sameIndent(); u.outln('{'); u.incIndent(); :}
				ObjectMembers
				CloseBrace							{: u.outln(); u.lessIndent(); u.out('}'); :};

/**
 * A non-empty comma-separated list of `ObjectMember`
 * patterns.
 */
ObjectMembers ::= ObjectMember
				| ObjectMembers
					Comma							{: u.outln(','); :}
					ObjectMember;

/**
 * A JSON compound object member: a JSON string, a colon
 * and a `Value` pattern.
 */
ObjectMember ::= String:string
				Colon								{: u.sameIndent(); u.out(string, ": "); u.noIndentNext(); :}
				Value;
