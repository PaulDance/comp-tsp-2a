import java.util.Deque;
import java.util.ArrayDeque;
import java.util.List;
import java.util.ArrayList;

import calculator.*;
import calculator.operations.*;
import calculator.functions.*;

action code {:
	Deque<List<Expression>> callStack = new ArrayDeque<List<Expression>>();
:}


terminal String Newline, MinFunction, MaxFunction, SqrtFunction,
				CbrtFunction, PowFunction, Power, AbsFunction;
terminal Character Plus, Minus, Times, Divide, Modulo,
					Comma, OpenParenthesis, CloseParenthesis;

terminal Integer PositiveInteger;
terminal Double Decimal;

nonterminal Double Number;
nonterminal Expression Expression, FunctionCall, BinaryOperation;
nonterminal List<Expression> ExpressionList, NonEmptyExpressionList;
nonterminal CalculatorInput, NonEmptyExpressionListConstructor;

precedence left Plus, Minus;
precedence left Times, Divide, Modulo, Power;


start with CalculatorInput;
CalculatorInput ::= /* Epsilon */
				| CalculatorInput Newline						// Ignored
				| CalculatorInput
					Expression:expr								{: System.out.println(expr.evaluate()); :}
					Newline;

Expression ::= Number:n											{: RESULT = new Literal(n); :}
			| OpenParenthesis Expression:expr CloseParenthesis	{: RESULT = expr; :}
			| FunctionCall:fc									{: RESULT = fc; :}
			| BinaryOperation:bo								{: RESULT = bo; :};

Number ::= PositiveInteger:i									{: RESULT = new Double(i); :}
		| Decimal:d												{: RESULT = d; :};

BinaryOperation ::= Expression:op1 Plus Expression:op2			{: RESULT = new AdditionOperation(op1, op2); :}
				| Expression:op1 Minus Expression:op2			{: RESULT = new SubstractionOperation(op1, op2); :}
				| Expression:op1 Times Expression:op2			{: RESULT = new MultiplicationOperation(op1, op2); :}
				| Expression:op1 Divide Expression:op2			{: RESULT = new DivisionOperation(op1, op2); :}
				| Expression:op1 Modulo Expression:op2			{: RESULT = new ModuloOperation(op1, op2); :}
				| Expression:op1 Power Expression:op2			{: RESULT = new PowerOperation(op1, op2); :};


FunctionCall ::= MinFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new MinFunctionCall(exprList); :}
				| MaxFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new MaxFunctionCall(exprList); :}
				| AbsFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new AbsFunctionCall(exprList); :}
				| SqrtFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new SqrtFunctionCall(exprList); :}
				| CbrtFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new CbrtFunctionCall(exprList); :}
				| PowFunction
					OpenParenthesis
					ExpressionList:exprList
					CloseParenthesis							{: RESULT = new PowFunctionCall(exprList); :}
				;

ExpressionList ::= /* Epsilon */								{: RESULT = new ArrayList<Expression>(); :}
				| NonEmptyExpressionList:exprList				{: RESULT = exprList; :};

NonEmptyExpressionList ::= /* List start */						{: callStack.addLast(new ArrayList<Expression>()); :}
							NonEmptyExpressionListConstructor	{: RESULT = callStack.removeLast(); :};

NonEmptyExpressionListConstructor ::= Expression:expr			{: callStack.peekLast().add(expr); :}
									| NonEmptyExpressionListConstructor
										Comma
										Expression:expr			{: callStack.peekLast().add(expr); :};


