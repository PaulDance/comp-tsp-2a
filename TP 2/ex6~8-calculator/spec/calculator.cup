
terminal String Newline, MinFunction, MaxFunction;
terminal Character Plus, Minus, Times, Divide, Modulo, Comma,
					OpenParenthesis, CloseParenthesis;

terminal Integer PositiveInteger;
terminal Double Decimal;

nonterminal Double Number, Expression, FunctionCall;
nonterminal CalculatorInput, ExpressionList, NonEmptyExpressionList;
nonterminal Character BinaryOperator;

precedence left Plus, Minus;
precedence left Times, Divide, Modulo;


start with CalculatorInput;
CalculatorInput ::= /* Epsilon */
				| CalculatorInput Newline						// Ignored
				| CalculatorInput
					Expression:n								{: System.out.println(n); :}
					Newline;

Expression ::= Number:n											{: RESULT = new Literal(n); :}
			| OpenParenthesis Expression:expr CloseParenthesis	{: RESULT = expr; :}
			| FunctionCall:fc									{: RESULT = fc; :}
			| Expression:n1 BinaryOperator:op Expression:n2		{: RESULT =  :};

Number ::= PositiveInteger:i									{: RESULT = new Double(i); :}
		| Decimal:d												{: RESULT = d; :};

BinaryOperator ::= Plus:p										{: RESULT = p; :}
				| Minus:m										{: RESULT = m; :}
				| Times:t										{: RESULT = t; :}
				| Divide:d										{: RESULT = d; :}
				| Modulo:m										{: RESULT = m; :};

FunctionCall ::= ;

ExpressionList ::= /* Epsilon */ | NonEmptyExpressionList;

NonEmptyExpressionList ::= Expression
						| NonEmptyExpressionList
							Comma
							Expression;


