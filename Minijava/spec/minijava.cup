package syntax;
import syntax.ast.*;
import semantic.*;
import semantic.symtab.*;
import allocator.*;
import main.*;

action code {:
	// Utilitary classes to help build class and method bodies.
	public class VarOrMethodList {						// Class members = ( Var | Method)*
		public final ASTList<Var> vars;
		public final ASTList<Method> methods;
		
		public VarOrMethodList() {
			this.vars = new ASTList<Var>();
			this.methods = new ASTList<Method>();
		}
 	}
	
	class VarOrStmtList {								// Method or block members = ( Var | Stmt )*
		public final ASTList<Var> vars;
		public final ASTList<Stmt> stmts;
		
		public VarOrStmtList() {
			this.vars = new ASTList<Var>();
			this.stmts = new ASTList<Stmt>();
		}
	}
:};


terminal PLUS, MINUS, TIMES, AND, LESS, EQUALS, NOT;
terminal COMMA, DOT, SEP, LC, RC, LP, RP, LB, RB;
terminal CLASS, EXTENDS, MAIN, PRINTLN, PUBLIC, STATIC,
			STRING, VOID, BOOL, INT, THIS, NEW, IF,
			ELSE, WHILE, RETURN, LENGTH;
terminal Integer LIT_INT;
terminal Boolean LIT_BOOL;
terminal String  IDENT;

nonterminal Axiom Axiom;
nonterminal KlassMain KlassMain;
nonterminal Klass Klass;
nonterminal VarOrMethodList KlassBody, NonEmptyKlassBody;
nonterminal Var Var;
nonterminal Method Method;
nonterminal VarOrStmtList MethodBody, NonEmptyMethodBody;
nonterminal Formal Formal;
nonterminal ASTList<Formal> FormalArgs, NonEmptyFormalArgs;
nonterminal Ident Ident, Parent;
nonterminal Type Type;
nonterminal Stmt Stmt;
nonterminal Expr Expr;
nonterminal ASTList<Expr> Args, NonEmptyArgs;
nonterminal ExprOpBin ExprOpBin;
nonterminal ASTList<Klass>  KlassList;

precedence nonassoc ELSE;
precedence right EQUALS;
precedence left AND;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT;
precedence left DOT;


Axiom ::= KlassMain:km KlassList:kl							{: RESULT = new Axiom(km, kl); RESULT.addPosition(kmxleft, klxright); :};

KlassMain ::= CLASS:a Ident:id LC
				PUBLIC STATIC VOID MAIN
				LP STRING LB RB Ident:arg RP
				LC MethodBody:mb RC RC:z					{: RESULT = new KlassMain(id, arg, new StmtBlock(mb.vars, mb.stmts));
																RESULT.addPosition(axleft, zxright); :};

KlassList ::= /* Epsilon */									{: RESULT = new ASTList<Klass>(); :}
			| KlassList:kl Klass:k							{: kl.add(k); RESULT = kl; :};

Klass ::= CLASS:a Ident:id Parent:p LC KlassBody:kb RC:z	{: RESULT = new Klass(id, p, kb.vars, kb.methods);
																RESULT.addPosition(axleft, zxright); :};

Parent ::= /* Epsilon */									{: RESULT = new Ident("Object"); :}
		| EXTENDS Ident:id									{: RESULT = id; RESULT.addPosition(idxleft, idxright);:};

KlassBody ::= /* Epsilon */									{: RESULT = new VarOrMethodList(); :}
			| NonEmptyKlassBody:kb							{: RESULT = kb; :};

NonEmptyKlassBody ::= Var:var								{: RESULT = new VarOrMethodList(); RESULT.vars.add(var); :}
					| Method:method							{: RESULT = new VarOrMethodList(); RESULT.methods.add(method); :}
					| NonEmptyKlassBody:kb Var:var			{: kb.vars.add(var); RESULT = kb; :}
					| NonEmptyKlassBody:kb Method:method	{: kb.methods.add(method); RESULT = kb; :};

Method ::= PUBLIC:a Type:type Ident:id LP
			FormalArgs:fm RP LC MethodBody:mb
			RETURN Expr:expr SEP RC:z						{: RESULT = new Method(type, id, fm, mb.vars, mb.stmts, expr);
																RESULT.addPosition(axleft, zxright); :};

FormalArgs ::= /* Epsilon */								{: RESULT = new ASTList<Formal>(); :}
			| NonEmptyFormalArgs:fa							{: RESULT = fa; RESULT.addPosition(faxleft, faxright); :};

NonEmptyFormalArgs ::= Formal:formal						{: RESULT = new ASTList<Formal>(); RESULT.add(formal);
																RESULT.addPosition(formalxleft, formalxright); :}
					| NonEmptyFormalArgs:fa
						COMMA Formal:formal					{: fa.add(formal); RESULT = fa; RESULT.addPosition(faxleft, formalxright); :};

Formal ::= Type:type Ident:id								{: RESULT = new Formal(type, id); RESULT.addPosition(typexleft, idxright); :};

MethodBody ::= /* Epsilon */								{: RESULT = new VarOrStmtList(); :}
			| NonEmptyMethodBody:mb							{: RESULT = mb; :};

NonEmptyMethodBody ::= Var:var								{: RESULT = new VarOrStmtList(); RESULT.vars.add(var); :}
					| Stmt:stmt								{: RESULT = new VarOrStmtList(); RESULT.stmts.add(stmt); :}
					| NonEmptyMethodBody:mb Var:var			{: mb.vars.add(var); RESULT = mb; :}
					| NonEmptyMethodBody:mb Stmt:stmt		{: mb.stmts.add(stmt); RESULT = mb; :};

Var ::= Type:type Ident:id SEP:z							{: RESULT = new Var(type, id); RESULT.addPosition(typexleft, zxright); :};

Type ::= VOID:a												{: RESULT = new Type(TYPE.VOID); RESULT.addPosition(axleft, axright); :}
		| BOOL:a											{: RESULT = new Type(TYPE.BOOL); RESULT.addPosition(axleft, axright); :}
		| INT:a												{: RESULT = new Type(TYPE.INT); RESULT.addPosition(axleft, axright); :}
		| INT:a LB RB:z										{: RESULT = new Type(TYPE.INT_ARRAY); RESULT.addPosition(axleft, zxright); :}
		| Ident:id											{: RESULT = new Type(id.name); RESULT.addPosition(idxleft, idxright); :};

Ident ::= IDENT:a											{: RESULT = new Ident(a); RESULT.addPosition(axleft, axright); :};

Stmt ::= PRINTLN:a LP Expr:b RP SEP:x						{: RESULT = new StmtPrint(b); RESULT.addPosition(axleft, xxright); :}
		| Ident:id EQUALS Expr:expr SEP:z					{: RESULT = new StmtAssign(id, expr); RESULT.addPosition(idxleft, zxright); :}
		| Ident:id LB Expr:index RB EQUALS Expr:expr SEP:z	{: RESULT = new StmtArrayAssign(id, index, expr);
																RESULT.addPosition(idxleft, zxright); :}
		| LC:a MethodBody:mb RC:z							{: RESULT = new StmtBlock(mb.vars, mb.stmts);
																RESULT.addPosition(axleft, zxright); :}
		| IF:a LP Expr:expr RP Stmt:thenStmt				{: RESULT = new StmtIf(expr, thenStmt, new StmtBlock(new ASTList<Var>(), new ASTList<Stmt>()));
																RESULT.addPosition(axleft, thenStmtxright); :}
		| IF:a LP Expr:expr RP Stmt:thenStmt
			ELSE Stmt:elseStmt								{: RESULT = new StmtIf(expr, thenStmt, elseStmt);
																RESULT.addPosition(axleft, elseStmtxright); :}
		| WHILE:a LP Expr:expr RP Stmt:stmt					{: RESULT = new StmtWhile(expr, stmt); RESULT.addPosition(axleft, stmtxright); :};

Expr ::= LIT_INT:a											{: RESULT = new ExprLiteralInt(a); RESULT.addPosition(axleft, axright); :}
		| MINUS:a LIT_INT:z									{: RESULT = new ExprLiteralInt(-z); RESULT.addPosition(axleft, zxright); :}
		| LIT_BOOL:a										{: RESULT = new ExprLiteralBool(a); RESULT.addPosition(axleft, axright); :}
		| THIS:a											{: RESULT = new ExprIdent(new Ident("this"));
																RESULT.addPosition(axleft, axright); :}
		| Ident:id											{: RESULT = new ExprIdent(id); RESULT.addPosition(idxleft, idxright); :}
		| NEW:a Ident:id LP RP:z							{: RESULT = new ExprNew(id); RESULT.addPosition(axleft, zxright); :}
		| NEW:a INT LB Expr:expr RB:z						{: RESULT = new ExprArrayNew(expr); RESULT.addPosition(axleft, zxright); :}
		| Expr:expr DOT Ident:id LP Args:args RP:z			{: RESULT = new ExprCall(expr, id, args);
																RESULT.addPosition(exprxleft, zxright); :}
		| Expr:expr DOT LENGTH:z							{: RESULT = new ExprArrayLength(expr); RESULT.addPosition(exprxleft, zxright); :}
		| Expr:array LB Expr:index RB:z						{: RESULT = new ExprArrayLookup(array, index); RESULT.addPosition(arrayxleft, zxright); :}
		| LP:a Expr:expr RP:z								{: RESULT = expr; RESULT.addPosition(axleft, zxright); :}
		| NOT:a Expr:expr									{: RESULT = new ExprOpUn(OPER.NOT, expr);
																RESULT.addPosition(axleft, exprxright); :}
		| ExprOpBin:exprOpBin								{: RESULT = exprOpBin; RESULT.addPosition(exprOpBinxleft, exprOpBinxright);:};

ExprOpBin ::= Expr:op1 PLUS Expr:op2						{: RESULT = new ExprOpBin(op1, OPER.PLUS, op2); :}
			| Expr:op1 MINUS Expr:op2						{: RESULT = new ExprOpBin(op1, OPER.MINUS, op2); :}
			| Expr:op1 TIMES Expr:op2						{: RESULT = new ExprOpBin(op1, OPER.TIMES, op2); :}
			| Expr:op1 AND Expr:op2							{: RESULT = new ExprOpBin(op1, OPER.AND, op2); :}
			| Expr:op1 LESS Expr:op2						{: RESULT = new ExprOpBin(op1, OPER.LESS, op2); :};

Args ::= /* Epsilon */										{: RESULT = new ASTList<Expr>(); :}
		| NonEmptyArgs:args									{: RESULT = args; RESULT.addPosition(argsxleft, argsxright); :};

NonEmptyArgs ::= Expr:expr									{: RESULT = new ASTList<Expr>(); RESULT.add(expr);
																RESULT.addPosition(exprxleft, exprxright); :}
				| Args:args COMMA Expr:expr					{: args.add(expr); RESULT = args; RESULT.addPosition(argsxleft, exprxright); :};

